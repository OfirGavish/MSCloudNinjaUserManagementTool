; Script generated by Cascade AI Assistant
; Inno Setup Script for MSCloudNinjaGraphAPI

#define MyAppName "MS Cloud Ninja Graph API"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "Your Company Name"
#define MyAppURL "https://yourcompany.com"
#define MyAppExeName "MSCloudNinjaGraphAPI.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application
AppId={{YOUR-UNIQUE-GUID-HERE}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
; Uncomment the following line to run the installer with admin privileges
; PrivilegesRequired=admin
OutputBaseFilename=MSCloudNinjaGraphAPI_Installer
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
; Main application executable and dependencies
Source: "C:\Users\ofirga\source\repos\MSCloudNinjaGraphAPI\MSCloudNinjaGraphAPI\bin\Release\net6.0-windows\win-x64\publish\MSCloudNinjaGraphAPI.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\ofirga\source\repos\MSCloudNinjaGraphAPI\MSCloudNinjaGraphAPI\bin\Release\net6.0-windows\win-x64\publish\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[Code]
// Optional: Add pre-installation checks or custom logic
function InitializeSetup(): Boolean;
begin
  // You can add custom pre-installation checks here
  Result := True;
end;

function InitializeUninstall(): Boolean;
begin
  // Optional: Add custom uninstall logic
  Result := True;
end;
